{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14iODk524bqQ0V1y0VfIXXIKnHHva6OWU","timestamp":1687198657004}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZgjhTb1hJFkm","executionInfo":{"status":"ok","timestamp":1686030427934,"user_tz":-330,"elapsed":455,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"e6160a4b-0c89-431d-d038-b007f8733f62"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [1 2 3]]\n","[0 1 2 3]\n"]}],"source":["#copying and view\n","# import numpy as np\n","\n","# arr1=np.array([1,2,3])\n","# arr2= array.copy()\n","\n","\n","\n","\n","#Stacking\n","\n","import numpy as np\n","\n","arr1=np.array([1,2,3])\n","arr2= np.array([1,2,3])\n","\n","arr3=np.vstack((arr1,arr2))\n","\n","print(arr3)\n","\n","\n","\n","\n","\n","\n","\n","# #sort\n","# import numpy as np\n","\n","# arr= np.array([3,2,0,1])\n","# print(np.sort(arr))"]},{"cell_type":"code","source":["\n","#sort\n","import numpy as np\n","\n","arr= np.array([3,2,0,1])\n","print(np.sort(arr))\n","\n","\n","\n","import numpy as np\n","arr=np.array([[3,2,4],[5,0,1]])\n","print(np.sort(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5jmLuADfPsuv","executionInfo":{"status":"ok","timestamp":1686030599806,"user_tz":-330,"elapsed":4,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"314f5582-f1b0-4c42-cd7b-cf0e07e0ec84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3]\n","[[2 3 4]\n"," [0 1 5]]\n"]}]},{"cell_type":"code","source":["#filtering of array"],"metadata":{"id":"IlULENMFRGP7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","list1= [x for x in range(0,101,2)]\n","\n","a=np.array(list1)\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HSTlumsdSloJ","executionInfo":{"status":"ok","timestamp":1686031264390,"user_tz":-330,"elapsed":7,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"60e3b387-649c-49eb-ffab-07c045c471ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34\n","  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70\n","  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100]\n"]}]},{"cell_type":"markdown","source":["\n","NUMPY ARITHMETIC OPERATIONS\n","Copying and Viewing\n","\n","Copying and Viewing\n","\n","Copying : a new file will be created(copied)\n","Viewing : simply a shallow copy (viewing copy), the changes in the original file will be visible in the view file"],"metadata":{"id":"hQ9cBjn-4jND"}},{"cell_type":"code","source":["import numpy as np\n","\n","# creating the array\n","arr = np.array([1,2,3])\n","print(\"Array =\",arr)\n","\n","# copy of the array\n","acopy = arr.copy()\n","print(\"Copy =\",acopy)\n","\n","# view of the array\n","aview = arr.view()\n","print(\"View =\",aview)\n","\n","# changing the array\n","arr[0] = 69\n","print(\"Changed array =\",arr)\n","\n","# checking the changes\n","print(\"copy again =\",acopy)\n","print(\"view again =\",aview)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JFhE4aGQ4iNq","executionInfo":{"status":"ok","timestamp":1686108847961,"user_tz":-330,"elapsed":4,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"3002c3e3-e83f-4db4-cbc8-8154a49925c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Array = [1 2 3]\n","Copy = [1 2 3]\n","View = [1 2 3]\n","Changed array = [69  2  3]\n","copy again = [1 2 3]\n","view again = [69  2  3]\n"]}]},{"cell_type":"markdown","source":["Stacking 1D arrays\n","\n","vstack: stacks arrays in sequence vertically (row wise)\n","hstack:\n","column_stack\n","row_stack"],"metadata":{"id":"pmyd-rX04pZh"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr1 = np.array([1,2,3])\n","arr2 = np.array([4,5,6])\n","\n","arr_vstack = np.vstack((arr1,arr2))\n","print(\"vstacked array =\\n\",arr_vstack)\n","\n","arr_hstack = np.hstack((arr1,arr2))\n","print(\"hstacked array =\\n\",arr_hstack)\n","\n","arr_rowstack = np.row_stack((arr1,arr2))\n","print(\"rowstacked array =\\n\",arr_rowstack)\n","\n","arr_columnstack = np.column_stack((arr1,arr2))\n","print(\"columnstacked array =\\n\",arr_columnstack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hGsIAPkh4qkw","executionInfo":{"status":"ok","timestamp":1686108905203,"user_tz":-330,"elapsed":477,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"acacfe36-1732-4f86-c84a-93775b443065"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["vstacked array =\n"," [[1 2 3]\n"," [4 5 6]]\n","hstacked array =\n"," [1 2 3 4 5 6]\n","rowstacked array =\n"," [[1 2 3]\n"," [4 5 6]]\n","columnstacked array =\n"," [[1 4]\n"," [2 5]\n"," [3 6]]\n"]}]},{"cell_type":"markdown","source":["Stacking 2D & 3D arrays"],"metadata":{"id":"-gXU2rgb5CGx"}},{"cell_type":"code","source":["# https://www.geeksforgeeks.org/numpy-stack-in-python/"],"metadata":{"id":"9F8iB6MY5B24"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"VCbPNivn5BoF"}},{"cell_type":"markdown","source":["Data Sorting"],"metadata":{"id":"uW-4T7Ti5HBP"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr1 = np.array([56,21,5,22])\n","arr2 = np.array([[2,3,1],[21,14,5]])\n","# sorted 1D array\n","print(\"sorted array =\",np.sort(arr1))\n","# sorted 2D array\n","print(\"sorted array =\\n\",np.sort(arr2))\n","\n","# reverse sorted 1Darray\n","print(\"sorted array in descending order =\", np.sort(arr1)[::-1])\n","# reverse sorted 2D array\n","print(\"sorted array in descending order =\\n\", np.sort(arr2, axis=None, kind='quicksort')[::-1])"],"metadata":{"id":"ViTIBpvm5IR4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Filtering"],"metadata":{"id":"Gqg2-NPF5Mm-"}},{"cell_type":"code","source":["import numpy as np\n","are = np.array([41,42,43,44])\n","x = [True, False, True, False]\n","newarr = arr[x]\n","print(newarr)"],"metadata":{"id":"FbgjqPXJ5PVH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["SEQUENCE GENERATION\n","\n","METHOD_1: list to array conversion\n","METHOD_2: np.arange() function"],"metadata":{"id":"eyZnuLEl5RWh"}},{"cell_type":"code","source":["import numpy as np\n","\n","# converting list to array\n","\n","# this is a list of even numbers from 0 to 100\n","list1 = [x for x in range(0,101,2)]\n","\n","# conversion\n","a = np.array(list1)\n","print(type(a))              # ndarray means: n-dimensional array\n","\n","# printing the list as array\n","print(\"array =\",a)"],"metadata":{"id":"D8T40DFw5WRc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"kd1sQCvf5aTY"}},{"cell_type":"code","source":["b = np.arange(0,101,2)\n","print(b)"],"metadata":{"id":"n5nE6cFN5fgI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["reshape() : used to reshape the array"],"metadata":{"id":"BZrarwpz5lfC"}},{"cell_type":"code","source":["c = np.arange(9,0,-1).reshape(3,3)     #rows=3 and columns=3\n","print(c)"],"metadata":{"id":"q1W-bs3e5geF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**empty()**: used to return a new array of give shape and type. Has random values and uninitialised entries"],"metadata":{"id":"3M1S5H3BUlRb"}},{"cell_type":"code","source":["# creates an array of 3 rows, 3 columns with random integer values\n","some_array = np.empty((3,3),int)\n","print(some_array)"],"metadata":{"id":"Z0kCknIh5tWv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["getting the postitions (indexes) where elements of 2 numpy arrays, extract the indexes in which the elements in the 2 arrays match\n","\n","where() function : gives the indees of the elements according to the conditions"],"metadata":{"id":"Gsjz1kmX5wOs"}},{"cell_type":"code","source":["# find the indexes where elements are common\n","a = np.array([1,2,3,4,5])\n","b = np.array([1,3,2,4,5])\n","print(np.where(a==b))\n","\n","\n","# finding the indexes of the even elements\n","arr = np.array([10,20,33,45,58,68,74,89])\n","x = np.where(arr%2 == 0)\n","print(x)"],"metadata":{"id":"H3xuV_bS5z-Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["searchsorted() function : performs a binary search, and return the index of the given value from the given array\n","\n","values should be sorted first to get a correct output"],"metadata":{"id":"6QpeZVeI53lS"}},{"cell_type":"code","source":["import numpy as np\n","\n","# searches for 7 in the sorted array\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,7)\n","print(x)\n","\n","# shows wrong inpute when values are not sorted\n","arr2 = np.array([34,89,12,9])\n","x = np.searchsorted(arr2,12)\n","print(x)"],"metadata":{"id":"9bwNUfU853Sz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["we can use the side parameter of searchsorted() function to specify the side from which we want the index"],"metadata":{"id":"xBfZ3boW59HQ"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,7,side='right')\n","print(x)"],"metadata":{"id":"LA-vCsdN5_jf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["searching for multiple values"],"metadata":{"id":"0Z5dyyfh6D03"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,[7,8])\n","print(x)"],"metadata":{"id":"jVI5UVyZ6DY5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["NUMPY STATISTICAL OPERATIONS"],"metadata":{"id":"u2vJwCT-6DSR"}},{"cell_type":"code","source":["arr = np.array([1,2,3,4,5,9,6,7,8,9,9])\n","\n","# standard deviation\n","print(np.std(arr))\n","\n","# minimum\n","print(np.min(arr))\n","\n","# summation\n","print(np.sum(arr))\n","\n","# mean\n","print(np.mean(arr))\n","\n","# variance\n","print(np.var(arr))\n","\n","# mode (required scipy module)\n","import scipy\n","from scipy import stats\n","print(\"Most frequent element = \",stats.mode(arr)[0],\"occurring\",stats.mode(arr)[1],\"times\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A5SoSLVl6Ju-","executionInfo":{"status":"ok","timestamp":1686111182570,"user_tz":-330,"elapsed":882,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"154b708e-f009-4581-d84e-ddc830231328"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.7990553306073913\n","1\n","63\n","5.7272727272727275\n","7.834710743801653\n","Most frequent element =  [9] occurring [3] times\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-21-2aaa7928208e>:21: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n","  print(\"Most frequent element = \",stats.mode(arr)[0],\"occurring\",stats.mode(arr)[1],\"times\")\n"]}]},{"cell_type":"markdown","source":["https://numpy.org/doc/1.20/user/theory.broadcasting.html\n","https://numpy.org/doc/1.20/user/theory.broadcasting.html\n","\n","\n","\n","*PRACTICAL3 *\n","\n","get a dataset (csv)\n","\n","1.   get it into a list\n","2.   put that into an array\n","3.   and then perfrom the array operations\n"],"metadata":{"id":"EqyGjsBB6M-j"}},{"cell_type":"code","source":["\n","import numpy as np\n","\n","array3 = np.loadtxt('/content/olym.csv', delimiter=',' , dtype=str, skiprows=1)\n","print(array3)\n","rank=[]\n","country=[]\n","pop=[]\n","tm=[]\n","for i in array3:\n","  rank.append(int(i[0]))\n","  country.append(str(i[1]))\n","  pop.append(float(i[2]))\n","  tm.append(int(i[7]))\n","\n","#converting list into array\n","arr_rank=np.array(rank)\n","arr_coun=np.array(country)\n","arr_pop=np.array(pop)\n","arr_tmedal=np.array(tm)\n","\n","#displaying the array\n","print(\"Array1: \",arr_rank)\n","print(\"Array2: \",arr_coun)\n","print(\"Array3: \",arr_pop)\n","print(\"Array4: \",arr_tmedal)\n","\n","# standard deviation\n","print(np.std(arr_rank))\n","\n","# minimum\n","print(np.min(arr_rank))\n","\n","# summation\n","print(np.sum(arr_rank))\n","\n","# mean\n","print(np.mean(arr_rank))\n","\n","# variance\n","print(np.var(arr_rank))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5AiTnUcb6Mwp","executionInfo":{"status":"ok","timestamp":1686111780067,"user_tz":-330,"elapsed":452,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"9c535001-5b01-4e88-c2bd-dfa7cdac75f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['2' 'Bahamas' '0.39' '5.15' '1' '4' '1' '6' '2']\n"," ['3' 'New Zealand' '4.53' '3.97' '2' '1' '5' '8' '3']\n"," ['4' 'Jamaica' '2.79' '5.63' '3' '5' '10' '18' '4']\n"," ['5' 'Denmark' '5.67' '8.69' '1' '3' '9' '13' '5']\n"," ['6' 'Croatia' '4.24' '1.59' '3' '6' '4' '13' '6']\n"," ['7' 'Slovenia' '2.07' '4.65' '5' '5' '12' '22' '7']\n"," ['8' 'Azerbaijan' '9.75' '4.98' '6' '4' '11' '21' '8']\n"," ['9' 'Georgia' '4' '8.12' '4' '8' '1' '13' '9']\n"," ['10' 'Azerbaijan' '9.86' '5.16' '2' '9' '6' '17' '10']\n"," ['11' 'India' '11.2' '7.48' '8' '1' '3' '12' '11']\n"," ['12' 'Georgia' '1.2' '3.25' '3' '5' '12' '20' '12']\n"," ['13' 'Hungary' '3.1' '2.12' '4' '9' '1' '14' '13']\n"," ['14' 'China' '12.3' '1.11' '9' '6' '3' '18' '14']\n"," ['15' 'Japan' '8.6' '8.1' '3' '2' '6' '11' '15']]\n","Array1:  [ 2  3  4  5  6  7  8  9 10 11 12 13 14 15]\n","Array2:  ['Bahamas' 'New Zealand' 'Jamaica' 'Denmark' 'Croatia' 'Slovenia'\n"," 'Azerbaijan' 'Georgia' 'Azerbaijan' 'India' 'Georgia' 'Hungary' 'China'\n"," 'Japan']\n","Array3:  [ 0.39  4.53  2.79  5.67  4.24  2.07  9.75  4.    9.86 11.2   1.2   3.1\n"," 12.3   8.6 ]\n","Array4:  [ 6  8 18 13 13 22 21 13 17 12 20 14 18 11]\n","4.031128874149275\n","2\n","119\n","8.5\n","16.25\n"]}]},{"cell_type":"markdown","source":["**PANDAS**"],"metadata":{"id":"R3KVkmFaGEmo"}},{"cell_type":"code","source":["import pandas as pd\n","\n","mydataset = {\n","    'Batch': [\"C1\",\"C2\",\"C3\",\"C4\"],\n","    'Strength': [21,19,21,23]\n","}\n","\n","df= pd.DataFrame(mydataset)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IPGKugToJDdi","executionInfo":{"status":"ok","timestamp":1686112821812,"user_tz":-330,"elapsed":394,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"a98b56b3-2234-415c-8ca2-10d5ece5b466"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Batch  Strength\n","0    C1        21\n","1    C2        19\n","2    C3        21\n","3    C4        23\n"]}]},{"cell_type":"markdown","source":["**A Pandas Series** is like a column in a table.\n","It is a one dimensional array holding data if any of any type"],"metadata":{"id":"_MKgO4K1KBy4"}},{"cell_type":"code","source":["import pandas as pd\n","\n","a = [1,7,2]\n","\n","myvar = pd.Series(a)\n","\n","print(myvar)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-S8pYY3PKWme","executionInfo":{"status":"ok","timestamp":1686113021484,"user_tz":-330,"elapsed":413,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"8b276578-5ea6-4f1b-9a22-b16e649cce2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    1\n","1    7\n","2    2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","a = [1,7,2]\n","\n","myvar = pd.Series(a, index = [\"x\",\"y\",\"z\"])\n","\n","print(myvar)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wuBvyPIRSNRb","executionInfo":{"status":"ok","timestamp":1686635138894,"user_tz":-330,"elapsed":3,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"7e0a2763-92ca-47f7-dab0-b4e85e64d557"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x    1\n","y    7\n","z    2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","result = {\"A\":55,\"B\":65,\"C\":88}\n","\n","sr = pd.Series(result)\n","\n","print(sr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkorZ5WfSgr4","executionInfo":{"status":"ok","timestamp":1686635227437,"user_tz":-330,"elapsed":517,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"6657e958-1bcc-4bb0-c10e-5a6976b74c1e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A    55\n","B    65\n","C    88\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","result = {\"A\":55,\"B\":65,\"C\":88}\n","\n","sr = pd.Series(result, index = [\"A\",\"C\"])\n","\n","print(sr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7En-sSoS3PU","executionInfo":{"status":"ok","timestamp":1686635280734,"user_tz":-330,"elapsed":416,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"b871a39a-32f5-424e-fa56-abe83f7bef4e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A    55\n","C    88\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**PANDAS DATA FRAMES**"],"metadata":{"id":"dXFZ1pi_TCfU"}},{"cell_type":"code","source":["import pandas as pd\n","\n","data = {\n","    \"Course\": [\"a\",\"b\",\"c\"],\n","    \"Credits\": [4,3,5]\n","}\n","\n","#load data into a dataframe object:\n","\n","df = pd.DataFrame(data)\n","print(df)\n","\n","print(\"*\",df.loc[0])\n","print(\"*\",df.loc[[0,1]])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NK03POPpTJBZ","executionInfo":{"status":"ok","timestamp":1686635764037,"user_tz":-330,"elapsed":410,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"42437121-789f-4f54-f23e-306f42e0ea32"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Course  Credits\n","0      a        4\n","1      b        3\n","2      c        5\n","* Course     a\n","Credits    4\n","Name: 0, dtype: object\n","*   Course  Credits\n","0      a        4\n","1      b        3\n"]}]},{"cell_type":"code","source":["#with index argument, you can name your indices\n","\n","import pandas as pd\n","data ={\n","\n","    \"City\" : [\"Jod\",\"Ajm\",\"Jai\"],\n","    \"Temperature\" : [40,38,42]\n","\n","}\n","\n","df = pd.DataFrame(data, index = [\"day1\",\"day2\",\"day3\"])\n","print(df)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9HoX638U4VO","executionInfo":{"status":"ok","timestamp":1686636031414,"user_tz":-330,"elapsed":417,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"b96463b7-746f-46c6-d133-3d6c8cd8bc37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     City  Temperature\n","day1  Jod           40\n","day2  Ajm           38\n","day3  Jai           42\n"]}]},{"cell_type":"code","source":["#LOAD FILES INTO DATA FRAME\n","#A. CSV file :\n","\n","import pandas as pd\n","\n","df = pd.read_csv('/content/olym.csv')\n","print(df)\n","print(df.to_string())#complete data can be loaded or displayed, in case of big data files"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3xqeTWLV4Ye","executionInfo":{"status":"ok","timestamp":1686636267078,"user_tz":-330,"elapsed":410,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"cd4bcc12-fda6-484c-e8cf-eda94be33d96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n","     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","data= {\n","\n","    \"A\":{\n","        \"0\":60,\n","        \"1\":50,\n","        \"2\":40\n","    },\n","     \"B\":{\n","        \"0\":40,\n","        \"1\":30,\n","        \"2\":20\n","    },\n","      \"C\":{\n","        \"0\":70,\n","        \"1\":80,\n","        \"2\":10\n","    }\n","    }\n","\n","\n","df= pd.DataFrame(data)\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oY8NtTcmYKa1","executionInfo":{"status":"ok","timestamp":1686637061869,"user_tz":-330,"elapsed":634,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"8718b8c4-5620-4b23-80d6-0d74ea2818b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_json('/content/mark.js')\n","print(df)\n","print(df.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RWsw738mXAzv","executionInfo":{"status":"ok","timestamp":1686637722054,"user_tz":-330,"elapsed":440,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"9e3a2bf8-881c-48e8-9ddc-4950cdc93e8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n","    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/olym.csv')\n","print(df.head(15))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_jWG9KqYbrGc","executionInfo":{"status":"ok","timestamp":1686637619865,"user_tz":-330,"elapsed":540,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"93502733-8773-440d-e0cb-80ed8cfd318d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n"]}]},{"cell_type":"markdown","source":["**QUERIES**\n","\n","\n","1.  Highest paid job title?\n","2.   Highest salary in USD?\n","1.  Count of part time employees.\n","2.   Count of full time employees.\n","1.   Count of newly joined employees.\n","1.  Count of employees having more than 10 years of experience.\n","1.   Count of employees in year 2021?\n","1.   Year wise count of employees.\n","1.  In which year, count of employee is highest?\n","2.   Average salary in rupees?\n","2.   Lowest  salary in rupees?\n","2.   Highest salary in rupees?\n","2. Average salary in doller?\n","2. Lowest  salary in doller?\n","1. How many employees having job location as Canada?\n","1. How many employees having job location as US?\n","1. Job locationwise count\n","1. How many employees are working in small scale company?\n","1. How many employees are working in large scale company?\n","1. How many employees are working in medium scale company?\n","\n"],"metadata":{"id":"cKsfb59PBxMQ"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/company1.csv')\n","print(df.to_string())\n","\n","\n","# Highest paid job title\n","highest_paid_job_title = df['job_title'].max()\n","print(\"1.Highest paid job title : \",highest_paid_job_title)\n","\n","# Highest salary in USD\n","highest_salary_usd = df['salary_in_usd'].max()\n","print(\"2.Highest salary in USD : \",highest_salary_usd )\n","\n","# Count of part-time employees\n","part_time_count = df[df['employment_type'] == 'Part'].shape[0]\n","print(\"3.Count of part-time employees : \",part_time_count)\n","\n","# Count of full-time employees\n","full_time_count = df[df['employment_type'] == 'Full'].shape[0]\n","print(\"4.Count of full-time employees : \",full_time_count )\n","\n","# Count of newly joined employees\n","newly_joined_count = df[df['experiNewce_level'] == 'New'].shape[0]\n","print(\"5.Count of newly joined employees : \",newly_joined_count )\n","\n","# Count of employees having more than 10 years of experience\n","exp_count = df[df['experiNewce_level'] == \"above10\"].shape[0]\n","print(\"6.Count of employees having more than 10 years of experience : \",exp_count)\n","\n","# Count of employees in year 2021\n","employees_2021_count = df[df['work_year'] == 2021].shape[0]\n","print(\"7.Count of employees in year 2021 : \",employees_2021_count )\n","\n","# Year-wise count of employees\n","year_wise_count = df.groupby('work_year').size()\n","print(\"8.Year-wise count of employees : \",year_wise_count)\n","\n","# Year with the highest employee count\n","year_highest_employee_count = year_wise_count.idxmax()\n","print(\"9.Year with the highest employee count : \",year_highest_employee_count)\n","\n","# Average salary in rupees\n","average_salary_rupees = df['salary Rs'].mean()\n","print(\"10.Average salary in rupees : \",average_salary_rupees)\n","\n","# Lowest salary in rupees\n","lowest_salary_rupees = df['salary Rs'].min()\n","print(\"11.Lowest salary in rupees : \",lowest_salary_rupees )\n","\n","# Highest salary in rupees\n","highest_salary_rupees = df['salary Rs'].max()\n","print(\"12.Highest salary in rupees : \",highest_salary_rupees)\n","\n","# Average salary in dollars\n","average_salary_dollar = df['salary_in_usd'].mean()\n","print(\"13.Average salary in dollars : \",average_salary_dollar)\n","\n","# Lowest salary in dollars\n","lowest_salary_dollar = df['salary_in_usd'].min()\n","print(\"14.Lowest salary in dollars : \",lowest_salary_dollar)\n","\n","# Count of employees with job location as Canada\n","canada_count = df[df['employee_residNewce'] == 'CA'].shape[0]\n","print(\"15.Count of employees with job location as Canada : \",canada_count )\n","\n","# Count of employees with job location as US\n","us_count = df[df['employee_residNewce'] == 'US'].shape[0]\n","print(\"16.Count of employees with job location as US : \",us_count )\n","\n","# Job location-wise count\n","location_wise_count = df['employee_residNewce'].value_counts()\n","print(\"17.Job location-wise count : \",location_wise_count )\n","\n","# Count of employees working in small-scale companies\n","small_scale_count = df[df['company_size'] == 'S'].shape[0]\n","print(\"18.Count of employees working in small-scale companies : \",small_scale_count)\n","\n","# Count of employees working in large-scale companies\n","large_scale_count = df[df['company_size'] == 'L'].shape[0]\n","print(\"19.Count of employees working in large-scale companies : \",large_scale_count)\n","\n","# Count of employees working in medium-scale companies\n","medium_scale_count = df[df['company_size'] == 'M'].shape[0]\n","print(\"20.Count of employees working in medium-scale companies : \",medium_scale_count)\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7R_cQO4x6vCy","executionInfo":{"status":"ok","timestamp":1686718301724,"user_tz":-330,"elapsed":9,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"ecf6917e-6905-4a30-99ef-f01ddbc22e78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    work_year experiNewce_level employment_type                  job_title  salary Rs  salary_in_usd employee_residNewce company_location company_size\n","0        2023           below10            Full  Principal Data SciNewtist      80000          85847                  ES               ES            L\n","1        2021           above10            Part               ML Newgineer      30000          30000                  US               US            S\n","2        2023           above10            Part               ML Newgineer      25500          25500                  US               US            S\n","3        2023           below10            Full            Data SciNewtist     175000         175000                  CA               CA            M\n","4        2023           below10            Full            Data SciNewtist     120000         120000                  CA               CA            M\n","5        2021           below10            Full         Applied SciNewtist     222200         222200                  US               US            L\n","6        2022           below10            Full         Applied SciNewtist     136000         136000                  US               US            L\n","7        2023           below10            Full            Data SciNewtist     219000         219000                  CA               CA            M\n","8        2023           below10            Full            Data SciNewtist     141000         141000                  CA               CA            M\n","9        2023           below10            Part            Data SciNewtist     147100         147100                  US               US            M\n","10       2021           below10            Full            Data SciNewtist      90700          90700                  US               US            M\n","11       2022           below10            Part               Data Analyst     130000         130000                  US               US            M\n","12       2020           below10            Part               Data Analyst     100000         100000                  US               US            M\n","13       2020               New            Full         Applied SciNewtist     213660         213660                  US               US            L\n","14       2019               New            Part         Applied SciNewtist     130760         130760                  US               US            L\n","15       2019           below10            Full               Data Modeler     147100         147100                  US               US            M\n","16       2020           below10            Full               Data Modeler      90700          90700                  US               US            M\n","17       2023           below10            Part            Data SciNewtist     170000         170000                  US               US            M\n","18       2023           below10            Full            Data SciNewtist     150000         150000                  US               US            M\n","19       2023           above10            Full               Data Analyst     150000         150000                  US               US            M\n","20       2022           above10            Full               Data Analyst     110000         110000                  US               US            M\n","21       2021           below10            Part    Rebelow10arch Newgineer     275000         275000                  DE               DE            M\n","22       2023           below10            Part    Rebelow10arch Newgineer     174000         174000                  DE               DE            M\n","23       2022           below10            Part        Analytics Newgineer     230000         230000                  GB               GB            M\n","1.Highest paid job title :  Rebelow10arch Newgineer\n","2.Highest salary in USD :  275000\n","3.Count of part-time employees :  10\n","4.Count of full-time employees :  14\n","5.Count of newly joined employees :  2\n","6.Count of employees having more than 10 years of experience :  4\n","7.Count of employees in year 2021 :  4\n","8.Year-wise count of employees :  work_year\n","2019     2\n","2020     3\n","2021     4\n","2022     4\n","2023    11\n","dtype: int64\n","9.Year with the highest employee count :  2023\n","10.Average salary in rupees :  144071.66666666666\n","11.Lowest salary in rupees :  25500\n","12.Highest salary in rupees :  275000\n","13.Average salary in dollars :  144315.29166666666\n","14.Lowest salary in dollars :  25500\n","15.Count of employees with job location as Canada :  4\n","16.Count of employees with job location as US :  16\n","17.Job location-wise count :  US    16\n","CA     4\n","DE     2\n","ES     1\n","GB     1\n","Name: employee_residNewce, dtype: int64\n","18.Count of employees working in small-scale companies :  2\n","19.Count of employees working in large-scale companies :  5\n","20.Count of employees working in medium-scale companies :  17\n"]}]},{"cell_type":"markdown","source":["**LABELS**\n","\n","*  If nothing is specified, the values are labeled with their ide\n","\n","\n"],"metadata":{"id":"f_rzMixZKxvb"}},{"cell_type":"markdown","source":["**PRACTICAL 3 :**\n","\n","*   NUMPY OPERATIONS"],"metadata":{"id":"kQNA2EIfvas9"}},{"cell_type":"code","source":["#PRACTICAL 3 : \"NUMPY OPERATIONS\"\n","\n","\n","import numpy as np\n","\n","array = np.loadtxt('/content/scores.csv', delimiter=',' ,skiprows=1)\n","print(array)\n","math_scores =[]\n","science_scores=[]\n","english_scores=[]\n","\n","for i in array:\n","  math_scores.append(int(i[1]))\n","  science_scores.append(int(i[2]))\n","  english_scores.append(int(i[3]))\n","\n","\n","#converting list into array\n","arr_ms=np.array(math_scores)\n","arr_ss=np.array(science_scores)\n","arr_es=np.array(english_scores)\n","\n","#displaying the array\n","print(\"* MATH SCORES: \",arr_ms)\n","print(\"* SCIENCE SCORES: \",arr_ss)\n","print(\"* ENGLISH SCORES: \",arr_es)\n","\n","#*****OR*****#\n","# # Dataset\n","# math_scores = np.array([90, 85, 92, 78, 88])\n","# science_scores = np.array([82, 95, 88, 79, 91])\n","# english_scores = np.array([88, 92, 85, 90, 94])\n","#************#\n","\n","# Addition\n","total_scores = arr_ms + arr_ss + arr_es\n","print(\"1.Addition :\",total_scores)\n","\n","# Subtraction\n","math_minus_english = arr_ms - arr_es\n","print(\"2.Subtraction :\",math_minus_english)\n","\n","# Multiplication\n","science_times_2 = arr_ss * 2\n","print(\"3.Multiplication :\",science_times_2)\n","\n","# Division\n","english_divided_by_math = arr_es / arr_ms\n","print(\"4.Division :\",english_divided_by_math)\n","\n","# Transpose\n","english_transposed = np.transpose(arr_es)\n","print(\"5.Transpose :\",english_transposed)\n","\n","#**************************************************#\n","\n","# Horizontal stacking\n","horizontal_stack = np.hstack((arr_ms, arr_ss, arr_es))\n","print(\"6.Horizontal stacking :\",horizontal_stack)\n","\n","# Vertical stacking\n","vertical_stack = np.vstack((arr_ms, arr_ss, arr_es))\n","print(\"7.Vertical stacking :\",vertical_stack)\n","\n","#**************************************************#\n","\n","# Generate sequence of science score indices 0 to 4 along with values\n","\n","indices = np.arange(len(arr_ss))\n","\n","# Access data using the generated indices\n","for i in indices:\n","    print(\"8.Science score at index\", i, \":\", arr_ss[i])\n","\n","#**************************************************#\n","\n","# Copying arrays\n","math_scores_copy = arr_ms.copy()\n","print(\"9.Copying arrays :\",math_scores_copy)\n","\n","# Viewing arrays\n","science_scores_view = arr_ss.view()\n","print(\"10.Viewing arrays :\",science_scores_view)\n","\n","#**************************************************#\n","\n","# Data Stacking\n","data_stack = np.stack((arr_ms, arr_ss, arr_es), axis=1)\n","print(\"11.Data Stacking :\",data_stack)\n","\n","# Searching\n","index_of_92 = np.where(arr_ms == 92)\n","print(\"12.Searching :\",index_of_92)\n","\n","# Sorting\n","sorted_math_scores = np.sort(arr_ms)\n","print(\"13.Sorting :\",sorted_math_scores)\n","\n","# Counting\n","count_88 = np.count_nonzero(arr_es == 88)\n","print(\"14.Counting :\",count_88)\n","\n","# Broadcasting\n","broadcasted_sum = arr_ms + 10\n","print(\"15.Broadcasting :\",broadcasted_sum)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Muo0TNZvaJJ","executionInfo":{"status":"ok","timestamp":1686377931030,"user_tz":-330,"elapsed":5,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"054f8f6c-e893-45f1-95c2-81c6e3ff541b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1. 90. 82. 88.]\n"," [ 2. 85. 95. 92.]\n"," [ 3. 92. 88. 85.]\n"," [ 4. 78. 79. 90.]\n"," [ 5. 88. 91. 94.]]\n","* MATH SCORES:  [90 85 92 78 88]\n","* SCIENCE SCORES:  [82 95 88 79 91]\n","* ENGLISH SCORES:  [88 92 85 90 94]\n","1.Addition : [260 272 265 247 273]\n","2.Subtraction : [  2  -7   7 -12  -6]\n","3.Multiplication : [164 190 176 158 182]\n","4.Division : [0.97777778 1.08235294 0.92391304 1.15384615 1.06818182]\n","5.Transpose : [88 92 85 90 94]\n","6.Horizontal stacking : [90 85 92 78 88 82 95 88 79 91 88 92 85 90 94]\n","7.Vertical stacking : [[90 85 92 78 88]\n"," [82 95 88 79 91]\n"," [88 92 85 90 94]]\n","8.Science score at index 0 : 82\n","8.Science score at index 1 : 95\n","8.Science score at index 2 : 88\n","8.Science score at index 3 : 79\n","8.Science score at index 4 : 91\n","9.Copying arrays : [90 85 92 78 88]\n","10.Viewing arrays : [82 95 88 79 91]\n","11.Data Stacking : [[90 82 88]\n"," [85 95 92]\n"," [92 88 85]\n"," [78 79 90]\n"," [88 91 94]]\n","12.Searching : (array([2]),)\n","13.Sorting : [78 85 88 90 92]\n","14.Counting : 1\n","15.Broadcasting : [100  95 102  88  98]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Read the dataset into a NumPy array\n","sales_data = np.array([\n","    [10, 15, 12],\n","    [5, 9, 7],\n","    [13, 6, 10]\n","])\n","\n","# Perform matrix operations\n","transpose = np.transpose(sales_data)\n","matrix_product = np.dot(sales_data, transpose)\n","inverse = np.linalg.inv(sales_data)\n","\n","# Display the results\n","print(\"Transpose:\\n\", transpose)\n","print(\"Matrix Product:\\n\", matrix_product)\n","print(\"Inverse:\\n\", inverse)\n","\n","# Horizontal and vertical stacking of arrays\n","horizontal_stack = np.hstack((sales_data, sales_data))\n","print(horizontal_stack)\n","vertical_stack = np.vstack((sales_data, sales_data))\n","print(vertical_stack)\n","\n","# Custom sequence generation\n","custom_sequence = np.arange(1, 6) * 2\n","print(custom_sequence)\n","\n","# Arithmetic and Statistical Operations, Mathematical Operations, Bitwise Operators\n","sum_all = np.sum(sales_data)\n","print(sum_all)\n","sum_axis0 = np.sum(sales_data, axis=0)\n","print(sum_axis0)\n","mean = np.mean(sales_data)\n","print(mean)\n","max_value = np.max(sales_data)\n","print(max_value)\n","min_value = np.min(sales_data)\n","print(min_value)\n","sqrt = np.sqrt(sales_data)\n","print(sqrt)\n","bitwise_and = np.bitwise_and(sales_data, 5)\n","print(bitwise_and)\n","\n","# Copying and viewing arrays\n","copied_array = sales_data.copy()\n","print(copied_array)\n","view_array = sales_data.view()\n","print(view_array)\n","\n","# Data Stacking, Searching, Sorting, Counting, Broadcasting\n","stacked_data = np.stack((sales_data, sales_data))\n","print(stacked_data)\n","search_index = np.where(sales_data == 10)\n","print(search_index)\n","sorted_data = np.sort(sales_data)\n","print(sorted_data)\n","count_value_10 = np.count_nonzero(sales_data == 10)\n","print(count_value_10)\n","broadcasted_sum = sales_data + 5\n","print(broadcasted_sum)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UuvgH2t7M6ZQ","executionInfo":{"status":"ok","timestamp":1686382553447,"user_tz":-330,"elapsed":485,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"31f3a73b-9a1d-4ac5-b601-6e11b7220c0d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transpose:\n"," [[10  5 13]\n"," [15  9  6]\n"," [12  7 10]]\n","Matrix Product:\n"," [[469 269 340]\n"," [269 155 189]\n"," [340 189 305]]\n","Inverse:\n"," [[ 0.94117647 -1.52941176 -0.05882353]\n"," [ 0.80392157 -1.09803922 -0.19607843]\n"," [-1.70588235  2.64705882  0.29411765]]\n","[[10 15 12 10 15 12]\n"," [ 5  9  7  5  9  7]\n"," [13  6 10 13  6 10]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]\n"," [10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[ 2  4  6  8 10]\n","87\n","[28 30 29]\n","9.666666666666666\n","15\n","5\n","[[3.16227766 3.87298335 3.46410162]\n"," [2.23606798 3.         2.64575131]\n"," [3.60555128 2.44948974 3.16227766]]\n","[[0 5 4]\n"," [5 1 5]\n"," [5 4 0]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[[[10 15 12]\n","  [ 5  9  7]\n","  [13  6 10]]\n","\n"," [[10 15 12]\n","  [ 5  9  7]\n","  [13  6 10]]]\n","(array([0, 2]), array([0, 2]))\n","[[10 12 15]\n"," [ 5  7  9]\n"," [ 6 10 13]]\n","2\n","[[15 20 17]\n"," [10 14 12]\n"," [18 11 15]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KQwSJF7wQK6I"},"execution_count":null,"outputs":[]}]}