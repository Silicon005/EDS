{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14iODk524bqQ0V1y0VfIXXIKnHHva6OWU","timestamp":1687614261817}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZgjhTb1hJFkm","executionInfo":{"status":"ok","timestamp":1686030427934,"user_tz":-330,"elapsed":455,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"e6160a4b-0c89-431d-d038-b007f8733f62"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [1 2 3]]\n","[0 1 2 3]\n"]}],"source":["#copying and view\n","# import numpy as np\n","\n","# arr1=np.array([1,2,3])\n","# arr2= array.copy()\n","\n","\n","\n","\n","#Stacking\n","\n","import numpy as np\n","\n","arr1=np.array([1,2,3])\n","arr2= np.array([1,2,3])\n","\n","arr3=np.vstack((arr1,arr2))\n","\n","print(arr3)\n","\n","\n","\n","\n","\n","\n","\n","# #sort\n","# import numpy as np\n","\n","# arr= np.array([3,2,0,1])\n","# print(np.sort(arr))"]},{"cell_type":"code","source":["\n","#sort\n","import numpy as np\n","\n","arr= np.array([3,2,0,1])\n","print(np.sort(arr))\n","\n","\n","\n","import numpy as np\n","arr=np.array([[3,2,4],[5,0,1]])\n","print(np.sort(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5jmLuADfPsuv","executionInfo":{"status":"ok","timestamp":1686030599806,"user_tz":-330,"elapsed":4,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"314f5582-f1b0-4c42-cd7b-cf0e07e0ec84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 2 3]\n","[[2 3 4]\n"," [0 1 5]]\n"]}]},{"cell_type":"code","source":["#filtering of array"],"metadata":{"id":"IlULENMFRGP7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","list1= [x for x in range(0,101,2)]\n","\n","a=np.array(list1)\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HSTlumsdSloJ","executionInfo":{"status":"ok","timestamp":1686031264390,"user_tz":-330,"elapsed":7,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"60e3b387-649c-49eb-ffab-07c045c471ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34\n","  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70\n","  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100]\n"]}]},{"cell_type":"markdown","source":["\n","NUMPY ARITHMETIC OPERATIONS\n","Copying and Viewing\n","\n","Copying and Viewing\n","\n","Copying : a new file will be created(copied)\n","Viewing : simply a shallow copy (viewing copy), the changes in the original file will be visible in the view file"],"metadata":{"id":"hQ9cBjn-4jND"}},{"cell_type":"code","source":["import numpy as np\n","\n","# creating the array\n","arr = np.array([1,2,3])\n","print(\"Array =\",arr)\n","\n","# copy of the array\n","acopy = arr.copy()\n","print(\"Copy =\",acopy)\n","\n","# view of the array\n","aview = arr.view()\n","print(\"View =\",aview)\n","\n","# changing the array\n","arr[0] = 69\n","print(\"Changed array =\",arr)\n","\n","# checking the changes\n","print(\"copy again =\",acopy)\n","print(\"view again =\",aview)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JFhE4aGQ4iNq","executionInfo":{"status":"ok","timestamp":1686108847961,"user_tz":-330,"elapsed":4,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"3002c3e3-e83f-4db4-cbc8-8154a49925c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Array = [1 2 3]\n","Copy = [1 2 3]\n","View = [1 2 3]\n","Changed array = [69  2  3]\n","copy again = [1 2 3]\n","view again = [69  2  3]\n"]}]},{"cell_type":"markdown","source":["Stacking 1D arrays\n","\n","vstack: stacks arrays in sequence vertically (row wise)\n","hstack:\n","column_stack\n","row_stack"],"metadata":{"id":"pmyd-rX04pZh"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr1 = np.array([1,2,3])\n","arr2 = np.array([4,5,6])\n","\n","arr_vstack = np.vstack((arr1,arr2))\n","print(\"vstacked array =\\n\",arr_vstack)\n","\n","arr_hstack = np.hstack((arr1,arr2))\n","print(\"hstacked array =\\n\",arr_hstack)\n","\n","arr_rowstack = np.row_stack((arr1,arr2))\n","print(\"rowstacked array =\\n\",arr_rowstack)\n","\n","arr_columnstack = np.column_stack((arr1,arr2))\n","print(\"columnstacked array =\\n\",arr_columnstack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hGsIAPkh4qkw","executionInfo":{"status":"ok","timestamp":1686108905203,"user_tz":-330,"elapsed":477,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"acacfe36-1732-4f86-c84a-93775b443065"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["vstacked array =\n"," [[1 2 3]\n"," [4 5 6]]\n","hstacked array =\n"," [1 2 3 4 5 6]\n","rowstacked array =\n"," [[1 2 3]\n"," [4 5 6]]\n","columnstacked array =\n"," [[1 4]\n"," [2 5]\n"," [3 6]]\n"]}]},{"cell_type":"markdown","source":["Stacking 2D & 3D arrays"],"metadata":{"id":"-gXU2rgb5CGx"}},{"cell_type":"code","source":["# https://www.geeksforgeeks.org/numpy-stack-in-python/"],"metadata":{"id":"9F8iB6MY5B24"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"VCbPNivn5BoF"}},{"cell_type":"markdown","source":["Data Sorting"],"metadata":{"id":"uW-4T7Ti5HBP"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr1 = np.array([56,21,5,22])\n","arr2 = np.array([[2,3,1],[21,14,5]])\n","# sorted 1D array\n","print(\"sorted array =\",np.sort(arr1))\n","# sorted 2D array\n","print(\"sorted array =\\n\",np.sort(arr2))\n","\n","# reverse sorted 1Darray\n","print(\"sorted array in descending order =\", np.sort(arr1)[::-1])\n","# reverse sorted 2D array\n","print(\"sorted array in descending order =\\n\", np.sort(arr2, axis=None, kind='quicksort')[::-1])"],"metadata":{"id":"ViTIBpvm5IR4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Filtering"],"metadata":{"id":"Gqg2-NPF5Mm-"}},{"cell_type":"code","source":["import numpy as np\n","are = np.array([41,42,43,44])\n","x = [True, False, True, False]\n","newarr = arr[x]\n","print(newarr)"],"metadata":{"id":"FbgjqPXJ5PVH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["SEQUENCE GENERATION\n","\n","METHOD_1: list to array conversion\n","METHOD_2: np.arange() function"],"metadata":{"id":"eyZnuLEl5RWh"}},{"cell_type":"code","source":["import numpy as np\n","\n","# converting list to array\n","\n","# this is a list of even numbers from 0 to 100\n","list1 = [x for x in range(0,101,2)]\n","\n","# conversion\n","a = np.array(list1)\n","print(type(a))              # ndarray means: n-dimensional array\n","\n","# printing the list as array\n","print(\"array =\",a)"],"metadata":{"id":"D8T40DFw5WRc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"kd1sQCvf5aTY"}},{"cell_type":"code","source":["b = np.arange(0,101,2)\n","print(b)"],"metadata":{"id":"n5nE6cFN5fgI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["reshape() : used to reshape the array"],"metadata":{"id":"BZrarwpz5lfC"}},{"cell_type":"code","source":["c = np.arange(9,0,-1).reshape(3,3)     #rows=3 and columns=3\n","print(c)"],"metadata":{"id":"q1W-bs3e5geF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**empty()**: used to return a new array of give shape and type. Has random values and uninitialised entries"],"metadata":{"id":"3M1S5H3BUlRb"}},{"cell_type":"code","source":["# creates an array of 3 rows, 3 columns with random integer values\n","some_array = np.empty((3,3),int)\n","print(some_array)"],"metadata":{"id":"Z0kCknIh5tWv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["getting the postitions (indexes) where elements of 2 numpy arrays, extract the indexes in which the elements in the 2 arrays match\n","\n","where() function : gives the indees of the elements according to the conditions"],"metadata":{"id":"Gsjz1kmX5wOs"}},{"cell_type":"code","source":["# find the indexes where elements are common\n","a = np.array([1,2,3,4,5])\n","b = np.array([1,3,2,4,5])\n","print(np.where(a==b))\n","\n","\n","# finding the indexes of the even elements\n","arr = np.array([10,20,33,45,58,68,74,89])\n","x = np.where(arr%2 == 0)\n","print(x)"],"metadata":{"id":"H3xuV_bS5z-Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["searchsorted() function : performs a binary search, and return the index of the given value from the given array\n","\n","values should be sorted first to get a correct output"],"metadata":{"id":"6QpeZVeI53lS"}},{"cell_type":"code","source":["import numpy as np\n","\n","# searches for 7 in the sorted array\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,7)\n","print(x)\n","\n","# shows wrong inpute when values are not sorted\n","arr2 = np.array([34,89,12,9])\n","x = np.searchsorted(arr2,12)\n","print(x)"],"metadata":{"id":"9bwNUfU853Sz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["we can use the side parameter of searchsorted() function to specify the side from which we want the index"],"metadata":{"id":"xBfZ3boW59HQ"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,7,side='right')\n","print(x)"],"metadata":{"id":"LA-vCsdN5_jf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["searching for multiple values"],"metadata":{"id":"0Z5dyyfh6D03"}},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([6,7,8,9])\n","x = np.searchsorted(arr,[7,8])\n","print(x)"],"metadata":{"id":"jVI5UVyZ6DY5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["NUMPY STATISTICAL OPERATIONS"],"metadata":{"id":"u2vJwCT-6DSR"}},{"cell_type":"code","source":["arr = np.array([1,2,3,4,5,9,6,7,8,9,9])\n","\n","# standard deviation\n","print(np.std(arr))\n","\n","# minimum\n","print(np.min(arr))\n","\n","# summation\n","print(np.sum(arr))\n","\n","# mean\n","print(np.mean(arr))\n","\n","# variance\n","print(np.var(arr))\n","\n","# mode (required scipy module)\n","import scipy\n","from scipy import stats\n","print(\"Most frequent element = \",stats.mode(arr)[0],\"occurring\",stats.mode(arr)[1],\"times\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A5SoSLVl6Ju-","executionInfo":{"status":"ok","timestamp":1686111182570,"user_tz":-330,"elapsed":882,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"154b708e-f009-4581-d84e-ddc830231328"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.7990553306073913\n","1\n","63\n","5.7272727272727275\n","7.834710743801653\n","Most frequent element =  [9] occurring [3] times\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-21-2aaa7928208e>:21: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n","  print(\"Most frequent element = \",stats.mode(arr)[0],\"occurring\",stats.mode(arr)[1],\"times\")\n"]}]},{"cell_type":"markdown","source":["https://numpy.org/doc/1.20/user/theory.broadcasting.html\n","https://numpy.org/doc/1.20/user/theory.broadcasting.html\n","\n","\n","\n","*PRACTICAL3 *\n","\n","get a dataset (csv)\n","\n","1.   get it into a list\n","2.   put that into an array\n","3.   and then perfrom the array operations\n"],"metadata":{"id":"EqyGjsBB6M-j"}},{"cell_type":"code","source":["\n","import numpy as np\n","\n","array3 = np.loadtxt('/content/olym.csv', delimiter=',' , dtype=str, skiprows=1)\n","print(array3)\n","rank=[]\n","country=[]\n","pop=[]\n","tm=[]\n","for i in array3:\n","  rank.append(int(i[0]))\n","  country.append(str(i[1]))\n","  pop.append(float(i[2]))\n","  tm.append(int(i[7]))\n","\n","#converting list into array\n","arr_rank=np.array(rank)\n","arr_coun=np.array(country)\n","arr_pop=np.array(pop)\n","arr_tmedal=np.array(tm)\n","\n","#displaying the array\n","print(\"Array1: \",arr_rank)\n","print(\"Array2: \",arr_coun)\n","print(\"Array3: \",arr_pop)\n","print(\"Array4: \",arr_tmedal)\n","\n","# standard deviation\n","print(np.std(arr_rank))\n","\n","# minimum\n","print(np.min(arr_rank))\n","\n","# summation\n","print(np.sum(arr_rank))\n","\n","# mean\n","print(np.mean(arr_rank))\n","\n","# variance\n","print(np.var(arr_rank))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5AiTnUcb6Mwp","executionInfo":{"status":"ok","timestamp":1686111780067,"user_tz":-330,"elapsed":452,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"9c535001-5b01-4e88-c2bd-dfa7cdac75f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['2' 'Bahamas' '0.39' '5.15' '1' '4' '1' '6' '2']\n"," ['3' 'New Zealand' '4.53' '3.97' '2' '1' '5' '8' '3']\n"," ['4' 'Jamaica' '2.79' '5.63' '3' '5' '10' '18' '4']\n"," ['5' 'Denmark' '5.67' '8.69' '1' '3' '9' '13' '5']\n"," ['6' 'Croatia' '4.24' '1.59' '3' '6' '4' '13' '6']\n"," ['7' 'Slovenia' '2.07' '4.65' '5' '5' '12' '22' '7']\n"," ['8' 'Azerbaijan' '9.75' '4.98' '6' '4' '11' '21' '8']\n"," ['9' 'Georgia' '4' '8.12' '4' '8' '1' '13' '9']\n"," ['10' 'Azerbaijan' '9.86' '5.16' '2' '9' '6' '17' '10']\n"," ['11' 'India' '11.2' '7.48' '8' '1' '3' '12' '11']\n"," ['12' 'Georgia' '1.2' '3.25' '3' '5' '12' '20' '12']\n"," ['13' 'Hungary' '3.1' '2.12' '4' '9' '1' '14' '13']\n"," ['14' 'China' '12.3' '1.11' '9' '6' '3' '18' '14']\n"," ['15' 'Japan' '8.6' '8.1' '3' '2' '6' '11' '15']]\n","Array1:  [ 2  3  4  5  6  7  8  9 10 11 12 13 14 15]\n","Array2:  ['Bahamas' 'New Zealand' 'Jamaica' 'Denmark' 'Croatia' 'Slovenia'\n"," 'Azerbaijan' 'Georgia' 'Azerbaijan' 'India' 'Georgia' 'Hungary' 'China'\n"," 'Japan']\n","Array3:  [ 0.39  4.53  2.79  5.67  4.24  2.07  9.75  4.    9.86 11.2   1.2   3.1\n"," 12.3   8.6 ]\n","Array4:  [ 6  8 18 13 13 22 21 13 17 12 20 14 18 11]\n","4.031128874149275\n","2\n","119\n","8.5\n","16.25\n"]}]},{"cell_type":"markdown","source":["**PANDAS**"],"metadata":{"id":"R3KVkmFaGEmo"}},{"cell_type":"code","source":["import pandas as pd\n","\n","mydataset = {\n","    'Batch': [\"C1\",\"C2\",\"C3\",\"C4\"],\n","    'Strength': [21,19,21,23]\n","}\n","\n","df= pd.DataFrame(mydataset)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IPGKugToJDdi","executionInfo":{"status":"ok","timestamp":1686112821812,"user_tz":-330,"elapsed":394,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"a98b56b3-2234-415c-8ca2-10d5ece5b466"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Batch  Strength\n","0    C1        21\n","1    C2        19\n","2    C3        21\n","3    C4        23\n"]}]},{"cell_type":"markdown","source":["**A Pandas Series** is like a column in a table.\n","It is a one dimensional array holding data if any of any type"],"metadata":{"id":"_MKgO4K1KBy4"}},{"cell_type":"code","source":["import pandas as pd\n","\n","a = [1,7,2]\n","\n","myvar = pd.Series(a)\n","\n","print(myvar)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-S8pYY3PKWme","executionInfo":{"status":"ok","timestamp":1686113021484,"user_tz":-330,"elapsed":413,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"8b276578-5ea6-4f1b-9a22-b16e649cce2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    1\n","1    7\n","2    2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","a = [1,7,2]\n","\n","myvar = pd.Series(a, index = [\"x\",\"y\",\"z\"])\n","\n","print(myvar)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wuBvyPIRSNRb","executionInfo":{"status":"ok","timestamp":1686635138894,"user_tz":-330,"elapsed":3,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"7e0a2763-92ca-47f7-dab0-b4e85e64d557"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x    1\n","y    7\n","z    2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","result = {\"A\":55,\"B\":65,\"C\":88}\n","\n","sr = pd.Series(result)\n","\n","print(sr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkorZ5WfSgr4","executionInfo":{"status":"ok","timestamp":1686635227437,"user_tz":-330,"elapsed":517,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"6657e958-1bcc-4bb0-c10e-5a6976b74c1e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A    55\n","B    65\n","C    88\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","result = {\"A\":55,\"B\":65,\"C\":88}\n","\n","sr = pd.Series(result, index = [\"A\",\"C\"])\n","\n","print(sr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7En-sSoS3PU","executionInfo":{"status":"ok","timestamp":1686635280734,"user_tz":-330,"elapsed":416,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"b871a39a-32f5-424e-fa56-abe83f7bef4e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A    55\n","C    88\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**PANDAS DATA FRAMES**"],"metadata":{"id":"dXFZ1pi_TCfU"}},{"cell_type":"code","source":["import pandas as pd\n","\n","data = {\n","    \"Course\": [\"a\",\"b\",\"c\"],\n","    \"Credits\": [4,3,5]\n","}\n","\n","#load data into a dataframe object:\n","\n","df = pd.DataFrame(data)\n","print(df)\n","\n","print(\"*\",df.loc[0])\n","print(\"*\",df.loc[[0,1]])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NK03POPpTJBZ","executionInfo":{"status":"ok","timestamp":1686635764037,"user_tz":-330,"elapsed":410,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"42437121-789f-4f54-f23e-306f42e0ea32"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Course  Credits\n","0      a        4\n","1      b        3\n","2      c        5\n","* Course     a\n","Credits    4\n","Name: 0, dtype: object\n","*   Course  Credits\n","0      a        4\n","1      b        3\n"]}]},{"cell_type":"code","source":["#with index argument, you can name your indices\n","\n","import pandas as pd\n","data ={\n","\n","    \"City\" : [\"Jod\",\"Ajm\",\"Jai\"],\n","    \"Temperature\" : [40,38,42]\n","\n","}\n","\n","df = pd.DataFrame(data, index = [\"day1\",\"day2\",\"day3\"])\n","print(df)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9HoX638U4VO","executionInfo":{"status":"ok","timestamp":1686636031414,"user_tz":-330,"elapsed":417,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"b96463b7-746f-46c6-d133-3d6c8cd8bc37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     City  Temperature\n","day1  Jod           40\n","day2  Ajm           38\n","day3  Jai           42\n"]}]},{"cell_type":"code","source":["#LOAD FILES INTO DATA FRAME\n","#A. CSV file :\n","\n","import pandas as pd\n","\n","df = pd.read_csv('/content/olym.csv')\n","print(df)\n","print(df.to_string())#complete data can be loaded or displayed, in case of big data files"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3xqeTWLV4Ye","executionInfo":{"status":"ok","timestamp":1686636267078,"user_tz":-330,"elapsed":410,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"cd4bcc12-fda6-484c-e8cf-eda94be33d96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n","     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","data= {\n","\n","    \"A\":{\n","        \"0\":60,\n","        \"1\":50,\n","        \"2\":40\n","    },\n","     \"B\":{\n","        \"0\":40,\n","        \"1\":30,\n","        \"2\":20\n","    },\n","      \"C\":{\n","        \"0\":70,\n","        \"1\":80,\n","        \"2\":10\n","    }\n","    }\n","\n","\n","df= pd.DataFrame(data)\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oY8NtTcmYKa1","executionInfo":{"status":"ok","timestamp":1686637061869,"user_tz":-330,"elapsed":634,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"8718b8c4-5620-4b23-80d6-0d74ea2818b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_json('/content/mark.js')\n","print(df)\n","print(df.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RWsw738mXAzv","executionInfo":{"status":"ok","timestamp":1686637722054,"user_tz":-330,"elapsed":440,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"9e3a2bf8-881c-48e8-9ddc-4950cdc93e8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n","    A   B   C\n","0  60  40  70\n","1  50  30  80\n","2  40  20  10\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/olym.csv')\n","print(df.head(15))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_jWG9KqYbrGc","executionInfo":{"status":"ok","timestamp":1686637619865,"user_tz":-330,"elapsed":540,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"93502733-8773-440d-e0cb-80ed8cfd318d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     1      Grenada   0.11  9.36  8  1.1   2  11  1.2\n","0    2      Bahamas   0.39  5.15  1    4   1   6    2\n","1    3  New Zealand   4.53  3.97  2    1   5   8    3\n","2    4      Jamaica   2.79  5.63  3    5  10  18    4\n","3    5      Denmark   5.67  8.69  1    3   9  13    5\n","4    6      Croatia   4.24  1.59  3    6   4  13    6\n","5    7     Slovenia   2.07  4.65  5    5  12  22    7\n","6    8   Azerbaijan   9.75  4.98  6    4  11  21    8\n","7    9      Georgia   4.00  8.12  4    8   1  13    9\n","8   10   Azerbaijan   9.86  5.16  2    9   6  17   10\n","9   11        India  11.20  7.48  8    1   3  12   11\n","10  12      Georgia   1.20  3.25  3    5  12  20   12\n","11  13      Hungary   3.10  2.12  4    9   1  14   13\n","12  14        China  12.30  1.11  9    6   3  18   14\n","13  15        Japan   8.60  8.10  3    2   6  11   15\n"]}]},{"cell_type":"markdown","source":["**QUERIES**\n","\n","\n","1.  Highest paid job title?\n","2.   Highest salary in USD?\n","1.  Count of part time employees.\n","2.   Count of full time employees.\n","1.   Count of newly joined employees.\n","1.  Count of employees having more than 10 years of experience.\n","1.   Count of employees in year 2021?\n","1.   Year wise count of employees.\n","1.  In which year, count of employee is highest?\n","2.   Average salary in rupees?\n","2.   Lowest  salary in rupees?\n","2.   Highest salary in rupees?\n","2. Average salary in doller?\n","2. Lowest  salary in doller?\n","1. How many employees having job location as Canada?\n","1. How many employees having job location as US?\n","1. Job locationwise count\n","1. How many employees are working in small scale company?\n","1. How many employees are working in large scale company?\n","1. How many employees are working in medium scale company?\n","\n"],"metadata":{"id":"cKsfb59PBxMQ"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/company1.csv')\n","print(df.to_string())\n","\n","\n","# Highest paid job title\n","highest_paid_job_title = df['job_title'].max()\n","print(\"1.Highest paid job title : \",highest_paid_job_title)\n","\n","# Highest salary in USD\n","highest_salary_usd = df['salary_in_usd'].max()\n","print(\"2.Highest salary in USD : \",highest_salary_usd )\n","\n","# Count of part-time employees\n","part_time_count = df[df['employment_type'] == 'Part'].shape[0]\n","print(\"3.Count of part-time employees : \",part_time_count)\n","\n","# Count of full-time employees\n","full_time_count = df[df['employment_type'] == 'Full'].shape[0]\n","print(\"4.Count of full-time employees : \",full_time_count )\n","\n","# Count of newly joined employees\n","newly_joined_count = df[df['experiNewce_level'] == 'New'].shape[0]\n","print(\"5.Count of newly joined employees : \",newly_joined_count )\n","\n","# Count of employees having more than 10 years of experience\n","exp_count = df[df['experiNewce_level'] == \"above10\"].shape[0]\n","print(\"6.Count of employees having more than 10 years of experience : \",exp_count)\n","\n","# Count of employees in year 2021\n","employees_2021_count = df[df['work_year'] == 2021].shape[0]\n","print(\"7.Count of employees in year 2021 : \",employees_2021_count )\n","\n","# Year-wise count of employees\n","year_wise_count = df.groupby('work_year').size()\n","print(\"8.Year-wise count of employees : \",year_wise_count)\n","\n","# Year with the highest employee count\n","year_highest_employee_count = year_wise_count.idxmax()\n","print(\"9.Year with the highest employee count : \",year_highest_employee_count)\n","\n","# Average salary in rupees\n","average_salary_rupees = df['salary Rs'].mean()\n","print(\"10.Average salary in rupees : \",average_salary_rupees)\n","\n","# Lowest salary in rupees\n","lowest_salary_rupees = df['salary Rs'].min()\n","print(\"11.Lowest salary in rupees : \",lowest_salary_rupees )\n","\n","# Highest salary in rupees\n","highest_salary_rupees = df['salary Rs'].max()\n","print(\"12.Highest salary in rupees : \",highest_salary_rupees)\n","\n","# Average salary in dollars\n","average_salary_dollar = df['salary_in_usd'].mean()\n","print(\"13.Average salary in dollars : \",average_salary_dollar)\n","\n","# Lowest salary in dollars\n","lowest_salary_dollar = df['salary_in_usd'].min()\n","print(\"14.Lowest salary in dollars : \",lowest_salary_dollar)\n","\n","# Count of employees with job location as Canada\n","canada_count = df[df['employee_residNewce'] == 'CA'].shape[0]\n","print(\"15.Count of employees with job location as Canada : \",canada_count )\n","\n","# Count of employees with job location as US\n","us_count = df[df['employee_residNewce'] == 'US'].shape[0]\n","print(\"16.Count of employees with job location as US : \",us_count )\n","\n","# Job location-wise count\n","location_wise_count = df['employee_residNewce'].value_counts()\n","print(\"17.Job location-wise count : \",location_wise_count )\n","\n","# Count of employees working in small-scale companies\n","small_scale_count = df[df['company_size'] == 'S'].shape[0]\n","print(\"18.Count of employees working in small-scale companies : \",small_scale_count)\n","\n","# Count of employees working in large-scale companies\n","large_scale_count = df[df['company_size'] == 'L'].shape[0]\n","print(\"19.Count of employees working in large-scale companies : \",large_scale_count)\n","\n","# Count of employees working in medium-scale companies\n","medium_scale_count = df[df['company_size'] == 'M'].shape[0]\n","print(\"20.Count of employees working in medium-scale companies : \",medium_scale_count)\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7R_cQO4x6vCy","executionInfo":{"status":"ok","timestamp":1686718301724,"user_tz":-330,"elapsed":9,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"ecf6917e-6905-4a30-99ef-f01ddbc22e78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    work_year experiNewce_level employment_type                  job_title  salary Rs  salary_in_usd employee_residNewce company_location company_size\n","0        2023           below10            Full  Principal Data SciNewtist      80000          85847                  ES               ES            L\n","1        2021           above10            Part               ML Newgineer      30000          30000                  US               US            S\n","2        2023           above10            Part               ML Newgineer      25500          25500                  US               US            S\n","3        2023           below10            Full            Data SciNewtist     175000         175000                  CA               CA            M\n","4        2023           below10            Full            Data SciNewtist     120000         120000                  CA               CA            M\n","5        2021           below10            Full         Applied SciNewtist     222200         222200                  US               US            L\n","6        2022           below10            Full         Applied SciNewtist     136000         136000                  US               US            L\n","7        2023           below10            Full            Data SciNewtist     219000         219000                  CA               CA            M\n","8        2023           below10            Full            Data SciNewtist     141000         141000                  CA               CA            M\n","9        2023           below10            Part            Data SciNewtist     147100         147100                  US               US            M\n","10       2021           below10            Full            Data SciNewtist      90700          90700                  US               US            M\n","11       2022           below10            Part               Data Analyst     130000         130000                  US               US            M\n","12       2020           below10            Part               Data Analyst     100000         100000                  US               US            M\n","13       2020               New            Full         Applied SciNewtist     213660         213660                  US               US            L\n","14       2019               New            Part         Applied SciNewtist     130760         130760                  US               US            L\n","15       2019           below10            Full               Data Modeler     147100         147100                  US               US            M\n","16       2020           below10            Full               Data Modeler      90700          90700                  US               US            M\n","17       2023           below10            Part            Data SciNewtist     170000         170000                  US               US            M\n","18       2023           below10            Full            Data SciNewtist     150000         150000                  US               US            M\n","19       2023           above10            Full               Data Analyst     150000         150000                  US               US            M\n","20       2022           above10            Full               Data Analyst     110000         110000                  US               US            M\n","21       2021           below10            Part    Rebelow10arch Newgineer     275000         275000                  DE               DE            M\n","22       2023           below10            Part    Rebelow10arch Newgineer     174000         174000                  DE               DE            M\n","23       2022           below10            Part        Analytics Newgineer     230000         230000                  GB               GB            M\n","1.Highest paid job title :  Rebelow10arch Newgineer\n","2.Highest salary in USD :  275000\n","3.Count of part-time employees :  10\n","4.Count of full-time employees :  14\n","5.Count of newly joined employees :  2\n","6.Count of employees having more than 10 years of experience :  4\n","7.Count of employees in year 2021 :  4\n","8.Year-wise count of employees :  work_year\n","2019     2\n","2020     3\n","2021     4\n","2022     4\n","2023    11\n","dtype: int64\n","9.Year with the highest employee count :  2023\n","10.Average salary in rupees :  144071.66666666666\n","11.Lowest salary in rupees :  25500\n","12.Highest salary in rupees :  275000\n","13.Average salary in dollars :  144315.29166666666\n","14.Lowest salary in dollars :  25500\n","15.Count of employees with job location as Canada :  4\n","16.Count of employees with job location as US :  16\n","17.Job location-wise count :  US    16\n","CA     4\n","DE     2\n","ES     1\n","GB     1\n","Name: employee_residNewce, dtype: int64\n","18.Count of employees working in small-scale companies :  2\n","19.Count of employees working in large-scale companies :  5\n","20.Count of employees working in medium-scale companies :  17\n"]}]},{"cell_type":"markdown","source":["**LABELS**\n","\n","*  If nothing is specified, the values are labeled with their ide\n","\n","\n"],"metadata":{"id":"f_rzMixZKxvb"}},{"cell_type":"markdown","source":["**PRACTICAL 3 :**\n","\n","*   NUMPY OPERATIONS"],"metadata":{"id":"kQNA2EIfvas9"}},{"cell_type":"code","source":["#PRACTICAL 3 : \"NUMPY OPERATIONS\"\n","\n","\n","import numpy as np\n","\n","array = np.loadtxt('/content/scores.csv', delimiter=',' ,skiprows=1)\n","print(array)\n","math_scores =[]\n","science_scores=[]\n","english_scores=[]\n","\n","for i in array:\n","  math_scores.append(int(i[1]))\n","  science_scores.append(int(i[2]))\n","  english_scores.append(int(i[3]))\n","\n","\n","#converting list into array\n","arr_ms=np.array(math_scores)\n","arr_ss=np.array(science_scores)\n","arr_es=np.array(english_scores)\n","\n","#displaying the array\n","print(\"* MATH SCORES: \",arr_ms)\n","print(\"* SCIENCE SCORES: \",arr_ss)\n","print(\"* ENGLISH SCORES: \",arr_es)\n","\n","#*****OR*****#\n","# # Dataset\n","# math_scores = np.array([90, 85, 92, 78, 88])\n","# science_scores = np.array([82, 95, 88, 79, 91])\n","# english_scores = np.array([88, 92, 85, 90, 94])\n","#************#\n","\n","# Addition\n","total_scores = arr_ms + arr_ss + arr_es\n","print(\"1.Addition :\",total_scores)\n","\n","# Subtraction\n","math_minus_english = arr_ms - arr_es\n","print(\"2.Subtraction :\",math_minus_english)\n","\n","# Multiplication\n","science_times_2 = arr_ss * 2\n","print(\"3.Multiplication :\",science_times_2)\n","\n","# Division\n","english_divided_by_math = arr_es / arr_ms\n","print(\"4.Division :\",english_divided_by_math)\n","\n","# Transpose\n","english_transposed = np.transpose(arr_es)\n","print(\"5.Transpose :\",english_transposed)\n","\n","#**************************************************#\n","\n","# Horizontal stacking\n","horizontal_stack = np.hstack((arr_ms, arr_ss, arr_es))\n","print(\"6.Horizontal stacking :\",horizontal_stack)\n","\n","# Vertical stacking\n","vertical_stack = np.vstack((arr_ms, arr_ss, arr_es))\n","print(\"7.Vertical stacking :\",vertical_stack)\n","\n","#**************************************************#\n","\n","# Generate sequence of science score indices 0 to 4 along with values\n","\n","indices = np.arange(len(arr_ss))\n","\n","# Access data using the generated indices\n","for i in indices:\n","    print(\"8.Science score at index\", i, \":\", arr_ss[i])\n","\n","#**************************************************#\n","\n","# Copying arrays\n","math_scores_copy = arr_ms.copy()\n","print(\"9.Copying arrays :\",math_scores_copy)\n","\n","# Viewing arrays\n","science_scores_view = arr_ss.view()\n","print(\"10.Viewing arrays :\",science_scores_view)\n","\n","#**************************************************#\n","\n","# Data Stacking\n","data_stack = np.stack((arr_ms, arr_ss, arr_es), axis=1)\n","print(\"11.Data Stacking :\",data_stack)\n","\n","# Searching\n","index_of_92 = np.where(arr_ms == 92)\n","print(\"12.Searching :\",index_of_92)\n","\n","# Sorting\n","sorted_math_scores = np.sort(arr_ms)\n","print(\"13.Sorting :\",sorted_math_scores)\n","\n","# Counting\n","count_88 = np.count_nonzero(arr_es == 88)\n","print(\"14.Counting :\",count_88)\n","\n","# Broadcasting\n","broadcasted_sum = arr_ms + 10\n","print(\"15.Broadcasting :\",broadcasted_sum)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Muo0TNZvaJJ","executionInfo":{"status":"ok","timestamp":1686377931030,"user_tz":-330,"elapsed":5,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"054f8f6c-e893-45f1-95c2-81c6e3ff541b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1. 90. 82. 88.]\n"," [ 2. 85. 95. 92.]\n"," [ 3. 92. 88. 85.]\n"," [ 4. 78. 79. 90.]\n"," [ 5. 88. 91. 94.]]\n","* MATH SCORES:  [90 85 92 78 88]\n","* SCIENCE SCORES:  [82 95 88 79 91]\n","* ENGLISH SCORES:  [88 92 85 90 94]\n","1.Addition : [260 272 265 247 273]\n","2.Subtraction : [  2  -7   7 -12  -6]\n","3.Multiplication : [164 190 176 158 182]\n","4.Division : [0.97777778 1.08235294 0.92391304 1.15384615 1.06818182]\n","5.Transpose : [88 92 85 90 94]\n","6.Horizontal stacking : [90 85 92 78 88 82 95 88 79 91 88 92 85 90 94]\n","7.Vertical stacking : [[90 85 92 78 88]\n"," [82 95 88 79 91]\n"," [88 92 85 90 94]]\n","8.Science score at index 0 : 82\n","8.Science score at index 1 : 95\n","8.Science score at index 2 : 88\n","8.Science score at index 3 : 79\n","8.Science score at index 4 : 91\n","9.Copying arrays : [90 85 92 78 88]\n","10.Viewing arrays : [82 95 88 79 91]\n","11.Data Stacking : [[90 82 88]\n"," [85 95 92]\n"," [92 88 85]\n"," [78 79 90]\n"," [88 91 94]]\n","12.Searching : (array([2]),)\n","13.Sorting : [78 85 88 90 92]\n","14.Counting : 1\n","15.Broadcasting : [100  95 102  88  98]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Read the dataset into a NumPy array\n","sales_data = np.array([\n","    [10, 15, 12],\n","    [5, 9, 7],\n","    [13, 6, 10]\n","])\n","\n","# Perform matrix operations\n","transpose = np.transpose(sales_data)\n","matrix_product = np.dot(sales_data, transpose)\n","inverse = np.linalg.inv(sales_data)\n","\n","# Display the results\n","print(\"Transpose:\\n\", transpose)\n","print(\"Matrix Product:\\n\", matrix_product)\n","print(\"Inverse:\\n\", inverse)\n","\n","# Horizontal and vertical stacking of arrays\n","horizontal_stack = np.hstack((sales_data, sales_data))\n","print(horizontal_stack)\n","vertical_stack = np.vstack((sales_data, sales_data))\n","print(vertical_stack)\n","\n","# Custom sequence generation\n","custom_sequence = np.arange(1, 6) * 2\n","print(custom_sequence)\n","\n","# Arithmetic and Statistical Operations, Mathematical Operations, Bitwise Operators\n","sum_all = np.sum(sales_data)\n","print(sum_all)\n","sum_axis0 = np.sum(sales_data, axis=0)\n","print(sum_axis0)\n","mean = np.mean(sales_data)\n","print(mean)\n","max_value = np.max(sales_data)\n","print(max_value)\n","min_value = np.min(sales_data)\n","print(min_value)\n","sqrt = np.sqrt(sales_data)\n","print(sqrt)\n","bitwise_and = np.bitwise_and(sales_data, 5)\n","print(bitwise_and)\n","\n","# Copying and viewing arrays\n","copied_array = sales_data.copy()\n","print(copied_array)\n","view_array = sales_data.view()\n","print(view_array)\n","\n","# Data Stacking, Searching, Sorting, Counting, Broadcasting\n","stacked_data = np.stack((sales_data, sales_data))\n","print(stacked_data)\n","search_index = np.where(sales_data == 10)\n","print(search_index)\n","sorted_data = np.sort(sales_data)\n","print(sorted_data)\n","count_value_10 = np.count_nonzero(sales_data == 10)\n","print(count_value_10)\n","broadcasted_sum = sales_data + 5\n","print(broadcasted_sum)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UuvgH2t7M6ZQ","executionInfo":{"status":"ok","timestamp":1686382553447,"user_tz":-330,"elapsed":485,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"31f3a73b-9a1d-4ac5-b601-6e11b7220c0d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transpose:\n"," [[10  5 13]\n"," [15  9  6]\n"," [12  7 10]]\n","Matrix Product:\n"," [[469 269 340]\n"," [269 155 189]\n"," [340 189 305]]\n","Inverse:\n"," [[ 0.94117647 -1.52941176 -0.05882353]\n"," [ 0.80392157 -1.09803922 -0.19607843]\n"," [-1.70588235  2.64705882  0.29411765]]\n","[[10 15 12 10 15 12]\n"," [ 5  9  7  5  9  7]\n"," [13  6 10 13  6 10]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]\n"," [10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[ 2  4  6  8 10]\n","87\n","[28 30 29]\n","9.666666666666666\n","15\n","5\n","[[3.16227766 3.87298335 3.46410162]\n"," [2.23606798 3.         2.64575131]\n"," [3.60555128 2.44948974 3.16227766]]\n","[[0 5 4]\n"," [5 1 5]\n"," [5 4 0]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[[10 15 12]\n"," [ 5  9  7]\n"," [13  6 10]]\n","[[[10 15 12]\n","  [ 5  9  7]\n","  [13  6 10]]\n","\n"," [[10 15 12]\n","  [ 5  9  7]\n","  [13  6 10]]]\n","(array([0, 2]), array([0, 2]))\n","[[10 12 15]\n"," [ 5  7  9]\n"," [ 6 10 13]]\n","2\n","[[15 20 17]\n"," [10 14 12]\n"," [18 11 15]]\n"]}]},{"cell_type":"markdown","source":["#DATA CLEANING :\n"],"metadata":{"id":"f5T9FL4YRmpS"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","data=pd.read_csv('/content/purchase_data.csv')\n","data"],"metadata":{"id":"KQwSJF7wQK6I","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1687318498238,"user_tz":-330,"elapsed":18,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"e0eb5d52-ce89-4cc9-e3c8-db6e3f56bf25"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Order ID                     Product  Quantity Ordered  Price Each  \\\n","0   176559.0  Bose SoundSport Headphones               1.0       99.99   \n","1   176560.0                Google Phone               1.0      600.00   \n","2   176560.0            Wired Headphones               1.0       11.99   \n","3   176561.0            Wired Headphones               1.0       11.99   \n","4   176562.0        USB-C Charging Cable               1.0       11.95   \n","..       ...                         ...               ...         ...   \n","64  259329.0    Lightning Charging Cable               1.0       14.95   \n","65  259330.0       AA Batteries (4-pack)               2.0        3.84   \n","66  259331.0    Apple Airpods Headphones               1.0      150.00   \n","67  259332.0    Apple Airpods Headphones               1.0      150.00   \n","68  259333.0  Bose SoundSport Headphones               1.0       99.99   \n","\n","          Order Date                        Purchase Address  \n","0   04-07-2019 22:30       682 Chestnut St, Boston, MA 02215  \n","1   04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001  \n","2   04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001  \n","3      05/30/19 9:27       333 8th St, Los Angeles, CA 90001  \n","4     04/29/19 13:03  381 Wilson St, San Francisco, CA 94016  \n","..               ...                                     ...  \n","64  09-05-2019 19:00       480 Lincoln St, Atlanta, GA 30301  \n","65    09/25/19 22:01    763 Washington St, Seattle, WA 98101  \n","66     09/29/19 7:00     770 4th St, New York City, NY 10001  \n","67    09/16/19 19:21          782 Lake St, Atlanta, GA 30301  \n","68    09/19/19 18:03   347 Ridge St, San Francisco, CA 94016  \n","\n","[69 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-c701e0a0-4514-4a0a-a408-6c74a2b554b4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176559.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>04-07-2019 22:30</td>\n","      <td>682 Chestnut St, Boston, MA 02215</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>176560.0</td>\n","      <td>Google Phone</td>\n","      <td>1.0</td>\n","      <td>600.00</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176560.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>176561.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>05/30/19 9:27</td>\n","      <td>333 8th St, Los Angeles, CA 90001</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>176562.0</td>\n","      <td>USB-C Charging Cable</td>\n","      <td>1.0</td>\n","      <td>11.95</td>\n","      <td>04/29/19 13:03</td>\n","      <td>381 Wilson St, San Francisco, CA 94016</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>259329.0</td>\n","      <td>Lightning Charging Cable</td>\n","      <td>1.0</td>\n","      <td>14.95</td>\n","      <td>09-05-2019 19:00</td>\n","      <td>480 Lincoln St, Atlanta, GA 30301</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>259330.0</td>\n","      <td>AA Batteries (4-pack)</td>\n","      <td>2.0</td>\n","      <td>3.84</td>\n","      <td>09/25/19 22:01</td>\n","      <td>763 Washington St, Seattle, WA 98101</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>259331.0</td>\n","      <td>Apple Airpods Headphones</td>\n","      <td>1.0</td>\n","      <td>150.00</td>\n","      <td>09/29/19 7:00</td>\n","      <td>770 4th St, New York City, NY 10001</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>259332.0</td>\n","      <td>Apple Airpods Headphones</td>\n","      <td>1.0</td>\n","      <td>150.00</td>\n","      <td>09/16/19 19:21</td>\n","      <td>782 Lake St, Atlanta, GA 30301</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>259333.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>09/19/19 18:03</td>\n","      <td>347 Ridge St, San Francisco, CA 94016</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c701e0a0-4514-4a0a-a408-6c74a2b554b4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c701e0a0-4514-4a0a-a408-6c74a2b554b4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c701e0a0-4514-4a0a-a408-6c74a2b554b4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["# Drop rows of NaN"],"metadata":{"id":"fD_YWOVzW8aY"}},{"cell_type":"code","source":["nan_df = data[data.isna().any(axis=1)]\n","display(nan_df.head())\n","\n","data = data.dropna(how = 'all')\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"JyYn2S4MXA9G","executionInfo":{"status":"ok","timestamp":1687318518777,"user_tz":-330,"elapsed":487,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"14a7f3a3-8b9a-46f8-ff43-61ec6d007d36"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["    Order ID Product  Quantity Ordered  Price Each Order Date  \\\n","36       NaN     NaN               NaN         NaN        NaN   \n","51       NaN     NaN               NaN         NaN        NaN   \n","\n","   Purchase Address Month  Month 2  \n","36              NaN   NaN      NaN  \n","51              NaN   NaN      NaN  "],"text/html":["\n","  <div id=\"df-ff0231ec-e8e6-4d71-94ad-b914b4410385\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","      <th>Month</th>\n","      <th>Month 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>36</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff0231ec-e8e6-4d71-94ad-b914b4410385')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ff0231ec-e8e6-4d71-94ad-b914b4410385 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ff0231ec-e8e6-4d71-94ad-b914b4410385');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["   Order ID                     Product  Quantity Ordered  Price Each  \\\n","0  176559.0  Bose SoundSport Headphones               1.0       99.99   \n","1  176560.0                Google Phone               1.0      600.00   \n","2  176560.0            Wired Headphones               1.0       11.99   \n","3  176561.0            Wired Headphones               1.0       11.99   \n","4  176562.0        USB-C Charging Cable               1.0       11.95   \n","\n","         Order Date                        Purchase Address Month  Month 2  \n","0  04-07-2019 22:30       682 Chestnut St, Boston, MA 02215    04      4.0  \n","1  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001    04      4.0  \n","2  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001    04      4.0  \n","3     05/30/19 9:27       333 8th St, Los Angeles, CA 90001    05      5.0  \n","4    04/29/19 13:03  381 Wilson St, San Francisco, CA 94016    04      4.0  "],"text/html":["\n","  <div id=\"df-2fcfb9d2-5e42-4d5e-a3a1-5bfbe22fbf1a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","      <th>Month</th>\n","      <th>Month 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176559.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>04-07-2019 22:30</td>\n","      <td>682 Chestnut St, Boston, MA 02215</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>176560.0</td>\n","      <td>Google Phone</td>\n","      <td>1.0</td>\n","      <td>600.00</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176560.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>176561.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>05/30/19 9:27</td>\n","      <td>333 8th St, Los Angeles, CA 90001</td>\n","      <td>05</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>176562.0</td>\n","      <td>USB-C Charging Cable</td>\n","      <td>1.0</td>\n","      <td>11.95</td>\n","      <td>04/29/19 13:03</td>\n","      <td>381 Wilson St, San Francisco, CA 94016</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fcfb9d2-5e42-4d5e-a3a1-5bfbe22fbf1a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2fcfb9d2-5e42-4d5e-a3a1-5bfbe22fbf1a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2fcfb9d2-5e42-4d5e-a3a1-5bfbe22fbf1a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["# To work on date column(to handle wrong format)"],"metadata":{"id":"f_LE_hRuXgWO"}},{"cell_type":"code","source":["data=data[data['Order Date'].str[0:2]!='Or']"],"metadata":{"id":"3D0LqUYtXnwe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Make columns correct type"],"metadata":{"id":"C0ZlBkfPX2Eg"}},{"cell_type":"code","source":["data['Quantity Ordered'] = pd.to_numeric(data['Quantity Ordered'])\n","data['Price Each'] = pd.to_numeric(data['Price Each'])"],"metadata":{"id":"XLlr-57yX5L2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Augment data with addditional columns"],"metadata":{"id":"TJNDrC8wYM0_"}},{"cell_type":"code","source":["data['Month'] = data['Order Date'].str[0:2]\n","data['Month'] = data['Month'].astype('int64')#we can also use int32\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"MP4rld58YR6H","executionInfo":{"status":"ok","timestamp":1687318521781,"user_tz":-330,"elapsed":15,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"ad7bfb77-fc18-4ca5-9d99-f19e1eeff3a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Order ID                     Product  Quantity Ordered  Price Each  \\\n","0  176559.0  Bose SoundSport Headphones               1.0       99.99   \n","1  176560.0                Google Phone               1.0      600.00   \n","2  176560.0            Wired Headphones               1.0       11.99   \n","3  176561.0            Wired Headphones               1.0       11.99   \n","4  176562.0        USB-C Charging Cable               1.0       11.95   \n","\n","         Order Date                        Purchase Address  Month  Month 2  \n","0  04-07-2019 22:30       682 Chestnut St, Boston, MA 02215      4      4.0  \n","1  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001      4      4.0  \n","2  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001      4      4.0  \n","3     05/30/19 9:27       333 8th St, Los Angeles, CA 90001      5      5.0  \n","4    04/29/19 13:03  381 Wilson St, San Francisco, CA 94016      4      4.0  "],"text/html":["\n","  <div id=\"df-54181aa5-0a08-4d99-9f70-4d24baa779d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","      <th>Month</th>\n","      <th>Month 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176559.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>04-07-2019 22:30</td>\n","      <td>682 Chestnut St, Boston, MA 02215</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>176560.0</td>\n","      <td>Google Phone</td>\n","      <td>1.0</td>\n","      <td>600.00</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176560.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>176561.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>05/30/19 9:27</td>\n","      <td>333 8th St, Los Angeles, CA 90001</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>176562.0</td>\n","      <td>USB-C Charging Cable</td>\n","      <td>1.0</td>\n","      <td>11.95</td>\n","      <td>04/29/19 13:03</td>\n","      <td>381 Wilson St, San Francisco, CA 94016</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54181aa5-0a08-4d99-9f70-4d24baa779d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-54181aa5-0a08-4d99-9f70-4d24baa779d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-54181aa5-0a08-4d99-9f70-4d24baa779d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["# Add month column (alt)"],"metadata":{"id":"TD8sUV5zbFHY"}},{"cell_type":"code","source":["import datetime as dt\n","data['Month 2'] = pd.to_datetime(data['Order Date']).dt.month\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Xjd-iDFvbEiS","executionInfo":{"status":"ok","timestamp":1687318510073,"user_tz":-330,"elapsed":926,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"03b79b94-ea7b-4f95-d5d5-a88652a85ce4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Order ID                     Product  Quantity Ordered  Price Each  \\\n","0  176559.0  Bose SoundSport Headphones               1.0       99.99   \n","1  176560.0                Google Phone               1.0      600.00   \n","2  176560.0            Wired Headphones               1.0       11.99   \n","3  176561.0            Wired Headphones               1.0       11.99   \n","4  176562.0        USB-C Charging Cable               1.0       11.95   \n","\n","         Order Date                        Purchase Address Month  Month 2  \n","0  04-07-2019 22:30       682 Chestnut St, Boston, MA 02215    04      4.0  \n","1  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001    04      4.0  \n","2  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001    04      4.0  \n","3     05/30/19 9:27       333 8th St, Los Angeles, CA 90001    05      5.0  \n","4    04/29/19 13:03  381 Wilson St, San Francisco, CA 94016    04      4.0  "],"text/html":["\n","  <div id=\"df-a150c709-3d84-48df-8cd5-dd9adc3112ff\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","      <th>Month</th>\n","      <th>Month 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176559.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>04-07-2019 22:30</td>\n","      <td>682 Chestnut St, Boston, MA 02215</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>176560.0</td>\n","      <td>Google Phone</td>\n","      <td>1.0</td>\n","      <td>600.00</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176560.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>176561.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>05/30/19 9:27</td>\n","      <td>333 8th St, Los Angeles, CA 90001</td>\n","      <td>05</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>176562.0</td>\n","      <td>USB-C Charging Cable</td>\n","      <td>1.0</td>\n","      <td>11.95</td>\n","      <td>04/29/19 13:03</td>\n","      <td>381 Wilson St, San Francisco, CA 94016</td>\n","      <td>04</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a150c709-3d84-48df-8cd5-dd9adc3112ff')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a150c709-3d84-48df-8cd5-dd9adc3112ff button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a150c709-3d84-48df-8cd5-dd9adc3112ff');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["# Add city column"],"metadata":{"id":"2JG8QmX4e9dY"}},{"cell_type":"code","source":["def get_city(address):\n","  return address.split(\",\")[1].strip(\" \")\n","\n","def get_state(address):\n","  return address.split(\",\")[2].split(\" \")[1]\n","\n","data['City']  = data['Purchase Address'].apply(lambda x: f\"{get_city(x)} ({get_state(x)})\")\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"RxSoKrGte99z","executionInfo":{"status":"ok","timestamp":1687318526516,"user_tz":-330,"elapsed":14,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"cb1bcb91-4f79-45ab-90ff-ffe7e5e6d157"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Order ID                     Product  Quantity Ordered  Price Each  \\\n","0  176559.0  Bose SoundSport Headphones               1.0       99.99   \n","1  176560.0                Google Phone               1.0      600.00   \n","2  176560.0            Wired Headphones               1.0       11.99   \n","3  176561.0            Wired Headphones               1.0       11.99   \n","4  176562.0        USB-C Charging Cable               1.0       11.95   \n","\n","         Order Date                        Purchase Address  Month  Month 2  \\\n","0  04-07-2019 22:30       682 Chestnut St, Boston, MA 02215      4      4.0   \n","1  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001      4      4.0   \n","2  04-12-2019 14:38    669 Spruce St, Los Angeles, CA 90001      4      4.0   \n","3     05/30/19 9:27       333 8th St, Los Angeles, CA 90001      5      5.0   \n","4    04/29/19 13:03  381 Wilson St, San Francisco, CA 94016      4      4.0   \n","\n","                 City  \n","0         Boston (MA)  \n","1    Los Angeles (CA)  \n","2    Los Angeles (CA)  \n","3    Los Angeles (CA)  \n","4  San Francisco (CA)  "],"text/html":["\n","  <div id=\"df-b2db7d19-8fd7-4c6a-890f-457fa62b421c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Product</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Order Date</th>\n","      <th>Purchase Address</th>\n","      <th>Month</th>\n","      <th>Month 2</th>\n","      <th>City</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176559.0</td>\n","      <td>Bose SoundSport Headphones</td>\n","      <td>1.0</td>\n","      <td>99.99</td>\n","      <td>04-07-2019 22:30</td>\n","      <td>682 Chestnut St, Boston, MA 02215</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","      <td>Boston (MA)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>176560.0</td>\n","      <td>Google Phone</td>\n","      <td>1.0</td>\n","      <td>600.00</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","      <td>Los Angeles (CA)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176560.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>04-12-2019 14:38</td>\n","      <td>669 Spruce St, Los Angeles, CA 90001</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","      <td>Los Angeles (CA)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>176561.0</td>\n","      <td>Wired Headphones</td>\n","      <td>1.0</td>\n","      <td>11.99</td>\n","      <td>05/30/19 9:27</td>\n","      <td>333 8th St, Los Angeles, CA 90001</td>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>Los Angeles (CA)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>176562.0</td>\n","      <td>USB-C Charging Cable</td>\n","      <td>1.0</td>\n","      <td>11.95</td>\n","      <td>04/29/19 13:03</td>\n","      <td>381 Wilson St, San Francisco, CA 94016</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","      <td>San Francisco (CA)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2db7d19-8fd7-4c6a-890f-457fa62b421c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b2db7d19-8fd7-4c6a-890f-457fa62b421c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b2db7d19-8fd7-4c6a-890f-457fa62b421c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["# Data Exploration"],"metadata":{"id":"bitOLpq3iv-N"}},{"cell_type":"code","source":["data['Sales'] = data['Quantity Ordered'].astype('int')*data['Price Each'].astype('float')\n","\n","data.groupby(['Month']).sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"QnrCigzPi-uJ","executionInfo":{"status":"ok","timestamp":1687318531125,"user_tz":-330,"elapsed":14,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"71f727f0-1cf3-498f-dca5-a3fabdddb683"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-10-2c180bb5ce95>:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  data.groupby(['Month']).sum()\n"]},{"output_type":"execute_result","data":{"text/plain":["        Order ID  Quantity Ordered  Price Each  Month 2    Sales\n","Month                                                           \n","4      7335546.0             123.0      885.80    160.0  1210.76\n","5       353124.0               2.0      111.98     10.0   111.98\n","6       184076.0               1.0       14.95      6.0    14.95\n","8       726962.0               9.0       23.92     32.0    50.83\n","9      2378802.0              17.0      591.44     90.0   616.62\n","10      550924.0              11.0       10.67     30.0    39.69\n","11      740314.0              19.0       13.66     44.0    65.31\n","12      550635.0              17.0        8.97     36.0    50.83"],"text/html":["\n","  <div id=\"df-16e8961b-8255-4606-82b0-dc81a76cf41b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Order ID</th>\n","      <th>Quantity Ordered</th>\n","      <th>Price Each</th>\n","      <th>Month 2</th>\n","      <th>Sales</th>\n","    </tr>\n","    <tr>\n","      <th>Month</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>7335546.0</td>\n","      <td>123.0</td>\n","      <td>885.80</td>\n","      <td>160.0</td>\n","      <td>1210.76</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>353124.0</td>\n","      <td>2.0</td>\n","      <td>111.98</td>\n","      <td>10.0</td>\n","      <td>111.98</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>184076.0</td>\n","      <td>1.0</td>\n","      <td>14.95</td>\n","      <td>6.0</td>\n","      <td>14.95</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>726962.0</td>\n","      <td>9.0</td>\n","      <td>23.92</td>\n","      <td>32.0</td>\n","      <td>50.83</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2378802.0</td>\n","      <td>17.0</td>\n","      <td>591.44</td>\n","      <td>90.0</td>\n","      <td>616.62</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>550924.0</td>\n","      <td>11.0</td>\n","      <td>10.67</td>\n","      <td>30.0</td>\n","      <td>39.69</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>740314.0</td>\n","      <td>19.0</td>\n","      <td>13.66</td>\n","      <td>44.0</td>\n","      <td>65.31</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>550635.0</td>\n","      <td>17.0</td>\n","      <td>8.97</td>\n","      <td>36.0</td>\n","      <td>50.83</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16e8961b-8255-4606-82b0-dc81a76cf41b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-16e8961b-8255-4606-82b0-dc81a76cf41b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-16e8961b-8255-4606-82b0-dc81a76cf41b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["# Which city sold the msot product ?"],"metadata":{"id":"trihXix___qS"}},{"cell_type":"code","source":["def get_city(address):\n","  return address.split(\",\")[1].strip(\" \")\n","\n","data['City'] = data['Purchase Address'].apply(lambda x: f\"{get_city(x)}\")\n","data.head()\n","city_max=data.groupby(['City']).sum()\n","print(max(city_max))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKGyComuAIuo","executionInfo":{"status":"ok","timestamp":1687318532848,"user_tz":-330,"elapsed":10,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"41d064c3-84d1-4273-e71a-776a5d9dc2b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sales\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-11-b73d2bfe7604>:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  city_max=data.groupby(['City']).sum()\n"]}]},{"cell_type":"markdown","source":["# Question 4: What products are most often sold together?"],"metadata":{"id":"hAojQ9l4CSkb"}},{"cell_type":"code","source":["df = data[data['Order ID'].duplicated(keep=False)]\n","\n","# Referenced: https://stackoverflow.com/questions/27298178/concatenate-strings-from-several-rows-using-pandas-groupby\n","df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\n","df2 = df[['Order ID', 'Grouped']].drop_duplicates()\n","print(df['Grouped'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eHH3lZ1DCRd5","executionInfo":{"status":"ok","timestamp":1687318938691,"user_tz":-330,"elapsed":454,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"d6d41a92-9404-4147-e75a-0ff1050c3c45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1    Google Phone,Wired Headphones\n","2    Google Phone,Wired Headphones\n","Name: Grouped, dtype: object\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-2288d8e6336f>:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\n"]}]},{"cell_type":"code","source":["from itertools import combinations\n","from collections import Counter\n","\n","count = Counter()\n","\n","for row in df2['Grouped']:\n","    row_list = row.split(',')\n","    count.update(Counter(combinations(row_list, 2)))\n","\n","for key,value in count.most_common(10):\n","    print(key, value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7O4W-s5AChtt","executionInfo":{"status":"ok","timestamp":1687318947958,"user_tz":-330,"elapsed":482,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"ed94ec8b-ecb8-4433-d014-55976945ad2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('Google Phone', 'Wired Headphones') 1\n"]}]},{"cell_type":"markdown","source":["# What product sold the most? Why do you think it sold the most?"],"metadata":{"id":"n1HUruRPDB_z"}},{"cell_type":"code","source":["product_group = data.groupby('Product')\n","quantity_ordered = product_group.sum()['Quantity Ordered']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q7GxubUJC_Bx","executionInfo":{"status":"ok","timestamp":1687320177627,"user_tz":-330,"elapsed":9,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"5905aecf-ea3b-4d1a-c0ca-31b64baafbfd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-4058a2298ad5>:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  quantity_ordered = product_group.sum()['Quantity Ordered']\n"]}]},{"cell_type":"code","source":["print(quantity_ordered)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C2VqHfOlDL1S","executionInfo":{"status":"ok","timestamp":1687320178052,"user_tz":-330,"elapsed":6,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"bbee0e11-f578-4115-977c-9a52deedd4c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Product\n","AA Batteries (4-pack)          64.0\n","AAA Batteries (4-pack)        109.0\n","Apple Airpods Headphones        3.0\n","Bose SoundSport Headphones      3.0\n","Google Phone                    1.0\n","Lightning Charging Cable        4.0\n","USB-C Charging Cable            8.0\n","Wired Headphones                7.0\n","Name: Quantity Ordered, dtype: float64\n"]}]},{"cell_type":"code","source":["prices = data.groupby('Product').mean()['Price Each']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W_WtN2-ZDPRF","executionInfo":{"status":"ok","timestamp":1687320181051,"user_tz":-330,"elapsed":7,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"967e4824-233e-48e0-958e-dec5b49934b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-16-c7b1c1d6766f>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  prices = data.groupby('Product').mean()['Price Each']\n"]}]},{"cell_type":"code","source":["print(prices)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1uujZ5g2DP65","executionInfo":{"status":"ok","timestamp":1687320182154,"user_tz":-330,"elapsed":419,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"960ccbfb-cf52-40f8-e7f8-550642b8e929"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Product\n","AA Batteries (4-pack)           3.84\n","AAA Batteries (4-pack)          2.99\n","Apple Airpods Headphones      150.00\n","Bose SoundSport Headphones     99.99\n","Google Phone                  600.00\n","Lightning Charging Cable       14.95\n","USB-C Charging Cable           11.95\n","Wired Headphones               11.99\n","Name: Price Each, dtype: float64\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","x = np.array([0,10])\n","y = np.array([0,100])\n","\n","plt.plot(x,y)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"KaRgR6p0MBge","executionInfo":{"status":"ok","timestamp":1687321419064,"user_tz":-330,"elapsed":510,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"333f183f-8c61-48c2-957e-09c60051d02c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["%matplotlib inline"],"metadata":{"id":"bfP5bWCqM_T1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use('classic')\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","x = np.array([0,10])\n","y = np.array([0,100])\n","\n","plt.plot(x,y)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":440},"id":"ms1wtdS1NGd6","executionInfo":{"status":"ok","timestamp":1687321665772,"user_tz":-330,"elapsed":523,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"b8c932e7-aae3-4255-a11d-54d761f81ade"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","x = np.linspace(0,10,100)\n","fig=plt.figure()\n","plt.plot(x,np.sin(x),'-')\n","plt.plot(x,np.cos(x),'--')\n","fig.savefig('graph1.png')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":440},"id":"diiLBH9oN7p6","executionInfo":{"status":"ok","timestamp":1687322094281,"user_tz":-330,"elapsed":754,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"08eb2c87-96d3-44f2-d59f-17ea2ec21190"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(x, np.sin(x-0), color='blue')\n","plt.plot(x, np.sin(x-1), color=\"g\")\n","plt.plot(x,np.sin(x-2), color=\"0.75\")\n","plt.plot(x,np.sin(x-3), color=\"#FFDD44\")\n","plt.plot(x,np.sin(x-3), color=(1.0,0.2,0.3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"QvJRv_g7PTy7","executionInfo":{"status":"ok","timestamp":1687322251269,"user_tz":-330,"elapsed":12,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"2f517768-7cb4-4bbf-c821-4d00f77bd3b8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fe5e0d08c10>]"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(x,np.sin(x-0),color='blue', linestyle='solid')\n","plt.plot(x,np.sin(x-1), color='g',linestyle='dashed')\n","\n","plt.plot(x,np.sin(x-2), color='0.75', linestyle='dashdot')\n","\n","plt.plot(x,np.sin(x-3),color='#FF0044', linestyle='dotted')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"4ylK81gVQ72C","executionInfo":{"status":"ok","timestamp":1687322721648,"user_tz":-330,"elapsed":876,"user":{"displayName":"mayank soni","userId":"08610161849682688209"}},"outputId":"c93929f0-2bd1-4fd6-c938-ddd83d2077f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fe59bb68760>]"]},"metadata":{},"execution_count":27},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}